# QEMU on macOS

via https://www.arthurkoziel.com/qemu-ubuntu-20-04/

...

QEMU is a hardware emulator which can make use of different accelerators when running VMs.
The most popular accelerator is [KVM] which is built into the Linux kernel and allows Linux hosts to run VMs with native performance.

Using QEMU on macOS used to be very slow as no accelerator was available.
This changed 2 years ago when the project [added support] for the macOS native hypervisor with Hypervisor.framework (HVF) as an accelerator.

## Create the disk image

Once the installation is done, we can create the disk image that we’re going to install Ubuntu on.

We’re using the QCOW2 format to create a 20GB image. This can be resized later on if needed.
The Ubuntu installation took around 5GB of space when I installed it.

    qemu-img create -f qcow2 ubuntu-20.04.1-desktop-amd64.qcow2 20G

## Boot machine with Ubuntu ISO mounted

We can now boot up the machine with the Ubuntu ISO attached as a CD-ROM.

In this step we boot up the machine with the Ubuntu ISO mounted in the CD drive:

    qemu-system-x86_64 \
        -machine type=q35,accel=hvf \
        -smp 2 \
        -hda ubuntu-20.04.1-desktop-amd64.qcow2 \
        -cdrom ./ubuntu-20.04.1-desktop-amd64.iso \
        -m 4G \
        -vga virtio \
        -usb \
        -device usb-tablet \
        -display default,show-cursor=on

The options are:

* `-machine`: The emulated machine and the accelerator. q35 is the newest machine type and HVF is the macOS native hypervisor.
* `-smp`: Number of CPUs to use
* `-m`: Amount of memory to use
* `-hda`: Disk drive (the one we created earlier)
* `-cdrom`: The ISO image to put into the CD drive
* `-vga`: The graphic card to use. I found `virtio` (based on [Virgil] to have the best performance
* `-usb`: Enable USB host controller
* `-device` Adding a “usb-tablet” as an input device. I’m running this on a laptop and without this setting the mouse did not work.
* `-display`: To show the mouse cursor (disabled by default)

During testing I had problems with the Linux kernel as it would panic during the boot process.
The issue was the `-cpu` parameter. I fixed it by specifying the CPU architecture manually
(see `qemu-system-x86_64 -cpu help` for a list of all available architectures).

My machine has an IvyBridge processor (Core i7):

    $ sysctl -n machdep.cpu.brand_string

Intel(R) Core(TM) i7-3740QM CPU @ 2.70GHz

And using `-cpu IvyBridge` would fail. However when using `-cpu Nehalem` (also an i7 CPU) everything worked well.

Now after the machine is booted up the Ubuntu installer will run.
Follow the installation steps and don’t restart the VM at the end of the installation,
instead shut it down by stopping the qemu process with CTRL-C on the host.

## Boot without ISO mounted

When running the VM we don’t need the Ubuntu ISO mounted and can remove it by leaving out the `-cdrom` option:

    qemu-system-x86_64 \
        -machine type=q35,accel=hvf \
        -smp 2 \
        -hda ubuntu-20.04.1-desktop-amd64.qcow2 \
        -m 4G \
        -vga virtio \
        -usb \
        -device usb-tablet \
        -display default,show-cursor=on

## Conclusion

In my experience QEMU is faster, more responsive and uses less CPU/RAM than VirtualBox.
I didn’t have to configure any display scaling for HiDPI screens as it worked out of the box.
The only thing I’m missing are shared clipboards and drag-and-drop of files
(which are available when installing the VirtualBox Guest Additions).

[KVM]: https://www.linux-kvm.org/page/Main_Page
[added support]: https://wiki.qemu.org/ChangeLog/2.12
[Virgil]: https://virgil3d.github.io/

--------
Other references:

Getting started with qemu https://drewdevault.com/2018/09/10/Getting-started-with-qemu.html

(on Linux hosts)

...

Now let’s boot up a VM using our install media and virtual hard disk:

    qemu-system-x86_64 \
        -enable-kvm \
        -m 2048 \
        -nic user,model=virtio \
        -drive file=alpine.qcow2,media=disk,if=virtio \
        -cdrom alpine-standard-3.8.0-x86_64.iso \
        -sdl

This is a lot to take in. Let’s break it down:

`-enable-kvm`: This enables use of the KVM (kernel virtual machine) subsystem to use hardware accelerated virtualisation on Linux hosts.

`-m 2048`: This specifies 2048M (2G) of RAM to provide to the guest.

`-nic user,model=virtio`: Adds a virtual network interface controller, using a virtual LAN emulated by qemu. This is the most straightforward way to get internet in a guest, but there are other options (for example, you will probably want to use `-nic tap` if you want the guest to do networking directly on the host NIC). `model=virtio` specifies a special `virtio` NIC model, which is used by the virtio kernel module in the guest to provide faster networking.

`-drive file=alpine.qcow2,media=disk,if=virtio`: This attaches our virtual disk to the guest. It’ll show up as `/dev/vda`. We specify `if=virtio` for the same reason we did for `-nic`: it’s the fastest interface, but requires special guest support from the Linux virtio kernel module.

`-cdrom alpine-standard-3.8.0-x86_64.iso` connects a virtual CD drive to the guest and loads our install media into it.

`-sdl` finally specifies the graphical configuration. We’re using the SDL backend, which is the simplest usable graphical backend. It attaches a display to the guest and shows it in an [SDL] window on the host.

...

That covers enough to get you off of VirtualBox or whatever other bad hypervisor you’re using.
What else is possible with qemu? Here’s a short list of common stuff you can look into:

* Running pretty much any guest operating system
* Software emulation of non-native architectures like ARM, PPC, RISC-V
* Using `-spice` instead of `-sdl` to enable remote access to the display/keyboard/mouse
* Read-only disk images with guest writes stored in RAM (`snapshot=on`)
* Non-graphical boot with `-nographic` and `console=ttyS0` configured in your kernel command line
* Giving a genuine graphics card to your guest with KVM passthrough for high performance gaming, OpenCL, etc
* Using [virt-manager] or [Boxes] if you want a GUI to hold your hand
* And much more…

There’s really no excuse to be using any other hypervisor[^1]. They’re all dogshit compared to qemu.

[SDL]: https://www.libsdl.org/
[virt-manager]: https://virt-manager.org/
[Boxes]: https://help.gnome.org/users/gnome-boxes/stable/

[^1]: Especially VirtualBox. If you use VirtualBox after reading this article you make poor life choices and are an embarrassment to us all.
