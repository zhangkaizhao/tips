# write Rust unit tests to test panics

https://stackoverflow.com/questions/26469715/how-do-i-write-a-rust-unit-test-that-ensures-that-a-panic-has-occurred

----

https://stackoverflow.com/a/26470361/3449199

You can find the answer in [testing] section of the Rust book.
More specifically, you want `#[should_panic]` attribute:

    #[test]
    #[should_panic]
    fn test_invalid_matrices_multiplication() {
        let m1 = Matrix::new(3, 4);  // assume these are dimensions
        let m2 = Matrix::new(5, 6);
        m1 * m2
    }

[testing]: https://doc.rust-lang.org/book/ch11-01-writing-tests.html#checking-for-panics-with-should_panic

edited Jun 22, 2021 at 22:55
poolie https://stackoverflow.com/users/243712/poolie
answered Oct 20, 2014 at 16:24
Vladimir Matveev https://stackoverflow.com/users/788207/vladimir-matveev

----

https://stackoverflow.com/a/42649833/3449199

As of Rust 1.9.0, `std::panic::catch_unwind()` is available.
It allows you to put the code you expect to panic into a closure,
and only panics emitted by that code will be considered expected (i.e. a passing test).

    #[test]
    fn test_something() {
        ... //<-- Any panics here will cause test failure (good)
        let result = std::panic::catch_unwind(|| <expected_to_panic_operation_here>);
        assert!(result.is_err());  //probe further for specific error type here, if desired
    }

Note it cannot catch non-unwinding panics (e.g. `std::process::abort()`).


edited Jun 22, 2019 at 15:31
answered Mar 7, 2017 at 13:39
U007D https://stackoverflow.com/users/1541330/u007d

----

https://stackoverflow.com/a/26477479/3449199

If you want to assert that only a specific portion of the test function fails,
use `std::panic::catch_unwind()` and check that it returns an `Err`, for example with `is_err()`.
In complex test functions, this helps ensure that the test doesn't pass erroneously because of an early failure.

[Several] [tests] in the Rust standard library itself use this technique.

[Several]: https://github.com/rust-lang/rust/blob/a1bad57fa59a8069a6ebb05cd6a2ae73c88b2e98/src/test/run-pass/panic-uninitialized-zeroed.rs
[tests]: https://github.com/rust-lang/rust/blob/a1bad57fa59a8069a6ebb05cd6a2ae73c88b2e98/src/test/run-pass/running-with-no-runtime.rs

edited Dec 27, 2018 at 5:24
answered Oct 21, 2014 at 1:19
Francis GagnÃ© https://stackoverflow.com/users/234590/francis-gagn%c3%a9

----

https://doc.rust-lang.org/book/ch11-01-writing-tests.html#checking-for-panics-with-should_panic

To make `should_panic` tests more precise, we can add an optional `expected` parameter to the `should_panic` attribute.
The test harness will make sure that the failure message contains the provided text.

    pub struct Guess {
        value: i32,
    }

    // --snip--
    impl Guess {
        pub fn new(value: i32) -> Guess {
            if value < 1 {
                panic!(
                    "Guess value must be greater than or equal to 1, got {}.",
                    value
                );
            } else if value > 100 {
                panic!(
                    "Guess value must be less than or equal to 100, got {}.",
                    value
                );
            }

            Guess { value }
        }
    }

    #[cfg(test)]
    mod tests {
        use super::*;

        #[test]
        #[should_panic(expected = "Guess value must be less than or equal to 100")]
        fn greater_than_100() {
            Guess::new(200);
        }
    }

Listing 11-9: Testing that a condition will cause a `panic!` with a particular panic message
